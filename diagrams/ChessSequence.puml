@startuml
'https://plantuml.com/sequence-diagram

autonumber

title Moving a piece

actor user

user -> Game: movePiece(from: String, to: String)
activate Game

Game -> StandardGameRules: verify(gameData: GameData)
activate StandardGameRules

StandardGameRules -> PrePlayRules: verify()
activate PrePlayRules


PrePlayRules -> HashChessBoard: !positionExists(position = from)
activate HashChessBoard

HashChessBoard -> RectanglePositionValidator: positionExists(position = from)
activate RectanglePositionValidator
HashChessBoard <-- RectanglePositionValidator: boolean
deactivate RectanglePositionValidator

PrePlayRules <-- HashChessBoard: boolean
deactivate HashChessBoard

PrePlayRules -> HashChessBoard: !positionExists(position = to)
activate HashChessBoard
HashChessBoard -> RectanglePositionValidator: positionExists(position = to)
activate RectanglePositionValidator
HashChessBoard <-- RectanglePositionValidator: boolean
deactivate RectanglePositionValidator
PrePlayRules <-- HashChessBoard: boolean
deactivate HashChessBoard

PrePlayRules -> HashChessBoard: !board.containsPieceOfPlayer(position = from, player)
activate HashChessBoard
PrePlayRules <-- HashChessBoard: boolean
deactivate HashChessBoard

PrePlayRules -> HashChessBoard: board.containsPieceOfPlayer(position = to, player)
activate HashChessBoard
PrePlayRules <-- HashChessBoard: boolean
deactivate HashChessBoard

alt first failure of the conditions above

StandardGameRules <-- PrePlayRules: GameResult(engineResult = GENERAL_MOVE_VIOLATION)
Game <-- StandardGameRules: GameResult(engineResult = GENERAL_MOVE_VIOLATION)
user <-- Game: GameResult(engineResult = GENERAL_MOVE_VIOLATION)

end


PrePlayRules -> IsPlayValid: verify(arg: Piece)
activate IsPlayValid

IsPlayValid -> PieceType: getPlayIfValid(from: Position, to: Position)
activate PieceType

IsPlayValid <- PieceType: PlayResult
deactivate PieceType

alt play not valid

PrePlayRules <-- IsPlayValid: GameResult(engineResult = PIECE_VIOLATION)
StandardGameRules <-- PrePlayRules: GameResult(engineResult = PIECE_VIOLATION)
Game <-- StandardGameRules: GameResult(engineResult = PIECE_VIOLATION)
user <-- Game: GameResult(engineResult = PIECE_VIOLATION)

end

IsPlayValid -> PostPlayRules: verify(arg: Play)
activate PostPlayRules

PostPlayRules -> Play: execute()
activate Play

PostPlayRules <-- Play: ChessBoard
deactivate Play

PostPlayRules -> ChessBoard: getPieceAt(to)!!
activate ChessBoard
PostPlayRules <-- ChessBoard: Piece
deactivate ChessBoard

PostPlayRules -> ChessBoard: getRowAsWhite(to: Position, player)
activate ChessBoard
PostPlayRules <-- ChessBoard: Int
deactivate ChessBoard

PostPlayRules -> ChessBoard : isPositionOnUpperLimit(positionAsWhite)
activate ChessBoard
PostPlayRules <-- ChessBoard : boolean
deactivate ChessBoard

alt pawn on upper limit
    PostPlayRules -> ChessBoard: setPieceAt(to, promotionPiece)
end

PostPlayRules -> IsKingChecked: verify()
activate IsKingChecked
PostPlayRules <-- IsKingChecked: boolean
deactivate IsKingChecked

alt king is checked after play

IsPlayValid <-- PostPlayRules: GameResult(engineResult = POST_PLAY_VIOLATION)
PrePlayRules <-- IsPlayValid: GameResult(engineResult = POST_PLAY_VIOLATION)
StandardGameRules <-- PrePlayRules: GameResult(engineResult = POST_PLAY_VIOLATION)
Game <-- StandardGameRules: GameResult(engineResult = POST_PLAY_VIOLATION)
user <-- Game: GameResult(engineResult = POST_PLAY_VIOLATION)

end


PostPlayRules -> GameOverRules: verify(arg: Pair<Play, HashChessBoard>)
activate GameOverRules

alt win or tie

PostPlayRules <-- GameOverRules: GameResult(engineResult = [any of the win/tie states])
IsPlayValid <-- PostPlayRules: GameResult(engineResult = [any of the win/tie states])
PrePlayRules <-- IsPlayValid: GameResult(engineResult = [any of the win/tie states])
StandardGameRules <-- PrePlayRules: GameResult(engineResult = [any of the win/tie states])
Game <-- StandardGameRules: GameResult(engineResult = [any of the win/tie states])
user <-- Game: GameResult(engineResult = [any of the win/tie states])

end

PostPlayRules <-- GameOverRules: GameResult(engineResult = VALID_MOVE)
deactivate GameOverRules

IsPlayValid <-- PostPlayRules: GameResult(engineResult = VALID_MOVE)
deactivate PostPlayRules

PrePlayRules <-- IsPlayValid: GameResult(engineResult = VALID_MOVE)
deactivate IsPlayValid

StandardGameRules <-- PrePlayRules: GameResult(engineResult = VALID_MOVE)
deactivate PrePlayRules

Game <-- StandardGameRules: GameResult(engineResult = VALID_MOVE)
deactivate StandardGameRules

Game -> TurnManager: nextTurn()
activate TurnManager

Game <-- TurnManager: TurnManager
deactivate TurnManager

user <-- Game: GameResult(engineResult = VALID_MOVE)
deactivate Game

@enduml