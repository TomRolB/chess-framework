@startuml
'https://plantuml.com/sequence-diagram

autonumber

title Example: moving a bishop

actor user

user -> Game: movePiece(from: String, to: String)
activate Game

Game -> StandardGameRules: verify(gameData: GameData)
activate StandardGameRules

'TODO: intermediate steps in each RuleChain below
'TODO: fail case of each rule
StandardGameRules -> PrePlayRules: verify()
activate PrePlayRules


PrePlayRules -> HashChessBoard: !positionExists(position = from)
activate HashChessBoard

HashChessBoard -> RectanglePositionValidator: positionExists(position = from)
activate RectanglePositionValidator
HashChessBoard <-- RectanglePositionValidator: true
deactivate RectanglePositionValidator

PrePlayRules <-- HashChessBoard: false
deactivate HashChessBoard

PrePlayRules -> HashChessBoard: !positionExists(position = to)
activate HashChessBoard
HashChessBoard -> RectanglePositionValidator: positionExists(position = to)
activate RectanglePositionValidator
HashChessBoard <-- RectanglePositionValidator: true
deactivate RectanglePositionValidator
PrePlayRules <-- HashChessBoard: false
deactivate HashChessBoard

PrePlayRules -> HashChessBoard: !board.containsPieceOfPlayer(position = from, player)
activate HashChessBoard
PrePlayRules <-- HashChessBoard: false
deactivate HashChessBoard

PrePlayRules -> HashChessBoard: board.containsPieceOfPlayer(position = to, player)
activate HashChessBoard
PrePlayRules <-- HashChessBoard: false
deactivate HashChessBoard


PrePlayRules -> IsPlayValid: verify(arg: Piece)
activate IsPlayValid

IsPlayValid -> Bishop: getPlayIfValid(from: Position, to: Position)
activate Bishop

Bishop -> MoveType.DIAGONAL: isViolated(moveData: MovementData)
activate MoveType.DIAGONAL
Bishop <-- MoveType.DIAGONAL: false
deactivate MoveType.DIAGONAL

Bishop -> MoveType.DIAGONAL: isPathBlocked(moveData: MovementData, board: ChessBoard)
activate MoveType.DIAGONAL
Bishop <-- MoveType.DIAGONAL: false
deactivate MoveType.DIAGONAL

IsPlayValid <- Bishop: PlayResult
deactivate Bishop


IsPlayValid -> PostPlayRules: verify(arg: Play)
activate PostPlayRules

PostPlayRules -> GameOverRules: verify(arg: Pair<Play, HashChessBoard>)
activate GameOverRules

PostPlayRules <-- GameOverRules: GameResult(engineResult = VALID_MOVE)
deactivate GameOverRules

IsPlayValid <-- PostPlayRules: GameResult(engineResult = VALID_MOVE)
deactivate PostPlayRules

PrePlayRules <-- IsPlayValid: GameResult(engineResult = VALID_MOVE)
deactivate IsPlayValid

StandardGameRules <-- PrePlayRules: GameResult(engineResult = VALID_MOVE)
deactivate PrePlayRules

Game <-- StandardGameRules: GameResult(engineResult = VALID_MOVE)
deactivate StandardGameRules

Game -> TurnManager: nextTurn()
activate TurnManager

Game <-- TurnManager: TurnManager
deactivate TurnManager

user <-- Game: GameResult(engineResult = VALID_MOVE)
deactivate Game

@enduml