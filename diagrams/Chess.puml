@startuml
'https://plantuml.com/class-diagram



enum Player {
    BLACK
    WHITE
    + toString(): String
}

class Game {
    - gameRules: RuleChain<GameData, RuleResult>,
    - board: ChessBoard,
    - turnManager: TurnManager,
    + movePiece(String from, String to): RuleResult
}

class GameResult {
    + board: ChessBoard,
    + play: Play?,
    + engineResult: EngineResult,
    + message: String,
}

enum EngineResult {
    GENERAL_MOVE_VIOLATION,
    PIECE_VIOLATION,
    POST_PLAY_VIOLATION,
    WHITE_WINS,
    BLACK_WINS,
    TIE_BY_WHITE,
    TIE_BY_BLACK,
    VALID_MOVE,
}

interface TurnManager {
    + getTurn(): Player
    + nextTurn(): TurnManager
}

class Position{
    + row: Int,
    + col: Int
    + toString(): String
}

interface GameBoard {
    + isOccupied(position: Position): boolean
    + getPieceAt(position: Position): Piece?
    + setPieceAt(position: Position, Piece piece): ChessBoard?
    + detPieceAt(position: Position): ChessBoard
    + positionExists(position: Position): boolean
    + isPositionOnUpperLimit(position: Position): boolean
    + containsPieceOfPlayer(position: Position, Player player): boolean
    + getAllPositions(): Iterable<Position>
}

interface ChessBoardOps {
    + getAllPositionsOfPlayer(player: Player, includeKing: Boolean): Iterable<Position>
    + getRowAsWhite(position: Position,player: Player): Int
    + getKingPosition(player: Player): Position
}

interface ChessBoard extends GameBoard, ChessBoardOps

class HashChessBoard implements ChessBoard {
    - validator: PositionValidator,
    - boardMap: Map<Position, Piece>,
    - whiteKingPosition: Position,
    - blackKingPosition: Position,
    + isOccupied(position: Position): boolean
    + getPieceAt(position: Position): Piece?
    + setPieceAt(position: Position, Piece piece): ChessBoard?
    + detPieceAt(position: Position): ChessBoard
    + positionExists(position: Position): boolean
    + isPositionOnUpperLimit(position: Position): boolean
    + containsPieceOfPlayer(position: Position, Player player): boolean
    + getAllPositions(): Iterable<Position>
    + getAllPositionsOfPlayer(player: Player, includeKing: Boolean): Iterable<Position>
    + getRowAsWhite(position: Position,player: Player): Int
    + getKingPosition(player: Player): Position
}

interface PositionValidator {
    + positionExists(position: Position): Boolean
    + getRowAsWhite(position: Position, player: Player): Int
    + isPositionOnLastRow(position: Position): Boolean
}

class RectangleBoardValidator implements PositionValidator {
    - numberRows: int
    - numberCols: int
    + positionExists(position: Position): Boolean
    + getRowAsWhite(position: Position, player: Player): Int
    + isPositionOnLastRow(position: Position): Boolean
}

class Play implements Action {
    - actions: Iterable<Action>
    + execute(): void
}

interface Action {
    + execute(): ChessBoard
    + setBoard(board: ChessBoard): Action
}

class Move implements Action {
    - from: Position
    - to: Position
    - board: ChessBoard
    - pieceNextTurn: Piece
    + execute(): ChessBoard
    + setBoard(board: ChessBoard): Move
    + asPlay(): Play
}

class Take implements Action {
    - position: Position
    - board: ChessBoard
    + execute(): ChessBoard
}

class Piece {
    + player: Player
    + rules: PieceType
    + toString(): String
    + hashCode(): Int
    + equals(other: Any?): Boolean
}

interface PieceType {
    + isPlayValid(): boolean
    + getValidPlays(): Set<Play>
    + getPlayIfValid() Play
}

class KingPieceType implements PieceType {
    - player: Player
    + isPlayValid(): boolean
    + getValidPlays(): Set<Play>
    + getPlayIfValid() Play
    + isChecked(board: ChessBoard): Boolean
}

enum PlayerState {
    NORMAL,
    CHECKED
    STALEMATE
    CHECKMATE
}

interface MoveType {
    + isViolated(moveData: MovementData): Boolean
    + isPathBlocked( moveData: MovementData, board: ChessBoard): Boolean
    + getPossiblePositions( board: ChessBoard, position: Position): Iterable<Position>
}

enum ClassicMoveType implements MoveType {
    VERTICAL_AND_HORIZONTAL
    DIAGONAL
    ANY_STRAIGHT_LINE
    L_SHAPED
    ADJACENT_SQUARE

    + isViolated(moveData: MovementData): Boolean
    + isPathBlocked(moveData: MovementData, board: ChessBoard): boolean
    - getIncrements(): Iterable<Pair<Int, Int>>
    + getPossiblePositions(board: ChessBoard, position: Position): Iterable<Position>
    - getLineOfPositions( board: ChessBoard, position: Position, increments: Pair<Int, Int>): List<Position>
}

class MovementData {
    + from: String
    + to: String
    + fromRow: Int
    + fromCol: Int
    + toRow: Int
    + toCol: Int
    + rowDelta: Int
    + colDelta: Int
}

Game *--> GameRules
Game *-> ChessBoard
Game *-> TurnManager
Game *-> Player

Game o-> GameResult
GameResult *-> EngineResult

GameRules o-> ChessBoard
ChessBoard *-> Piece
HashChessBoard *--> PositionValidator
'Piece -> MoveRuleSet
'RuleSet -> Rule
'Piece -> Rule
Piece *-> Player
Piece *-> PieceType
PieceType -> Play
Play *--> Action
Play *--> ChessBoard
ClassicMoveType -> MovementData



'TODO: The fact that you cannot take your own pieces is a general rule. Check and checkmate are, too; even board-limit rules. Think about which general rules could be represented and how.


@enduml